---
import type { ImageMetadata } from 'astro'

interface Props {
  src: ImageMetadata | string
  alt: string
  caption?: string
}

const { src, alt, caption } = Astro.props

const svgUrl = typeof src === 'string' ? src : src.src
---

<figure class="excalidraw-figure">
  <div class="excalidraw-svg" data-svg-url={svgUrl} aria-label={alt}>
    <img src={svgUrl} alt={alt} style="display: none;" />
  </div>
  {caption && <figcaption>{caption}</figcaption>}
</figure>

<script>
  let isProcessing = false

  function modifySvg(svgString: string): string {
    const parser = new DOMParser()
    const doc = parser.parseFromString(svgString, 'image/svg+xml')
    const svg = doc.documentElement

    svg.setAttribute('width', '100%')
    svg.setAttribute('height', '100%')
    svg.classList.add('w-full', 'h-auto')

    doc.querySelectorAll('text').forEach((text) => {
      text.removeAttribute('fill')
      text.classList.add('fill-skin-base')
    })

    doc.querySelectorAll('rect').forEach((rect) => {
      rect.removeAttribute('fill')
      rect.classList.add('fill-skin-soft')
    })

    doc.querySelectorAll('path').forEach((path) => {
      path.removeAttribute('stroke')
      path.classList.add('stroke-skin-accent')
    })

    doc.querySelectorAll('g').forEach((g) => {
      g.classList.add('excalidraw-element')
    })

    return new XMLSerializer().serializeToString(doc)
  }

  // Custom logger that works in both dev and prod
  const logger = {
    log: (...args: any[]) => {
      console.log('[Excalidraw]', ...args)
      // Also log to document for debugging in production
      if (typeof window !== 'undefined') {
        const debugEl =
          document.getElementById('excalidraw-debug') ||
          (() => {
            const el = document.createElement('div')
            el.id = 'excalidraw-debug'
            el.style.cssText = `
              position: fixed;
              bottom: 0;
              right: 0;
              max-width: 400px;
              max-height: 200px;
              overflow: auto;
              background: rgba(0,0,0,0.8);
              color: white;
              font-family: monospace;
              font-size: 12px;
              padding: 10px;
              z-index: 9999;
            `
            document.body.appendChild(el)
            return el
          })()
        const timestamp = new Date().toISOString().split('T')[1].split('.')[0]
        debugEl.innerHTML += `[${timestamp}] ${args.join(' ')}\n`
        debugEl.scrollTop = debugEl.scrollHeight
      }
    },
    error: (...args: any[]) => {
      console.error('[Excalidraw]', ...args)
      if (typeof window !== 'undefined') {
        const debugEl = document.getElementById('excalidraw-debug')
        if (debugEl) {
          const timestamp = new Date().toISOString().split('T')[1].split('.')[0]
          debugEl.innerHTML += `[${timestamp}] ERROR: ${args.join(' ')}\n`
          debugEl.scrollTop = debugEl.scrollHeight
        }
      }
    },
  }

  // Add a global error handler
  window.onerror = function (msg, url, line, col, error) {
    logger.error('Global error:', msg, `at ${url}:${line}:${col}`, error)
    return false
  }

  function initExcalidrawSVG() {
    if (isProcessing) {
      logger.log('Already processing, skipping')
      return
    }
    isProcessing = true

    logger.log('Initializing ExcalidrawSVG')
    const svgContainers = document.querySelectorAll<HTMLElement>('.excalidraw-svg')
    logger.log('Found containers:', svgContainers.length)

    svgContainers.forEach(async (container) => {
      const svgUrl = container.dataset.svgUrl
      logger.log('Processing container with URL:', svgUrl)

      if (svgUrl) {
        try {
          // Get the img element that's already loaded
          const img = container.querySelector('img')
          logger.log('Found img element:', img?.src)
          if (!img) throw new Error('No image element found')

          // Wait for image to load
          logger.log('Waiting for image to load...')
          await new Promise((resolve, reject) => {
            if (img.complete) {
              logger.log('Image already loaded')
              resolve(null)
            } else {
              img.onload = () => {
                logger.log('Image loaded successfully')
                resolve(null)
              }
              img.onerror = () => {
                logger.log('Image failed to load')
                reject(new Error('Failed to load image'))
              }
            }
          })

          // Fetch the SVG content
          logger.log('Fetching SVG from:', svgUrl)
          const response = await fetch(svgUrl)
          logger.log('Fetch response:', response.status, response.statusText)
          if (!response.ok) throw new Error(`Failed to load SVG: ${response.statusText}`)

          const svgText = await response.text()
          logger.log('SVG text length:', svgText.length)

          const modifiedSvg = modifySvg(svgText)
          logger.log('Modified SVG length:', modifiedSvg.length)

          container.innerHTML = modifiedSvg
          logger.log('SVG inserted into container')
        } catch (error) {
          logger.error('Error in ExcalidrawSVG component:', {
            error,
            container: container.outerHTML,
            url: svgUrl,
            location: window.location.href,
          })
          container.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
            <text x="10" y="50" fill="red">Error loading SVG</text>
          </svg>`
        }
      }
    })

    isProcessing = false
  }

  // Handle both initial load and view transitions
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initExcalidrawSVG)
  } else {
    initExcalidrawSVG()
  }

  // Run on subsequent navigation
  document.addEventListener('astro:page-load', () => {
    logger.log('Page load event triggered')
    initExcalidrawSVG()
  })

  // Clean up when leaving page
  document.addEventListener('astro:before-swap', () => {
    logger.log('Before swap event triggered')
    isProcessing = false
  })
</script>

<style>
  .excalidraw-figure {
    @apply mx-auto my-8 w-full max-w-full overflow-hidden;
  }
  .excalidraw-svg {
    @apply w-full max-w-full overflow-hidden;
  }
  :global(.excalidraw-svg svg) {
    @apply h-auto w-full;
  }
  /* text */
  :global(.excalidraw-svg .fill-skin-base) {
    @apply fill-[rgb(74,79,105)] dark:fill-[rgb(205,214,244)]; /* ctp-latte-text : ctp-mocha-text */
  }
  /* secondary lines */
  :global(.excalidraw-svg .fill-skin-soft) {
    @apply fill-[rgb(24,24,37)] dark:fill-[rgb(127,132,156)]; /* ctp-latte-subtext-1 : ctp-mocha-overlay-1 */
  }
  /* main lines */
  :global(.excalidraw-svg .stroke-skin-accent) {
    @apply stroke-[rgb(92,95,119)] dark:stroke-[rgb(205,214,244)]; /* ctp-latte-text : ctp-mocha-text */
  }
  :global(.excalidraw-svg .excalidraw-element) {
    @apply transition-all duration-300;
  }
  :global(.excalidraw-svg .excalidraw-element:hover) {
    @apply opacity-85;
  }
  figcaption {
    @apply mt-4 text-center text-sm italic;
  }
</style>
