---
export interface Props {
  title?: string
  maxWidth?: string // Allow customizing max width per instance
}
const { title = '', maxWidth = '700px' } = Astro.props
---

<script>
  import mermaid from 'mermaid'

  /**
   * Initializes and renders Mermaid diagrams.
   *
   * This needs to be called in multiple scenarios because of how Astro's View Transitions work:
   * 1. On initial page load to render the first diagrams
   * 2. After client-side navigation because Astro preserves scripts between pages
   *    but Mermaid needs to process any new diagram markup that appears
   *
   * Without reinitialization, diagrams would only show as plain text after navigation,
   * requiring a full page refresh to render properly.
   */
  function initializeMermaid() {
    mermaid.initialize({
      startOnLoad: true,
      theme: 'neutral',
      htmlLabels: true,
      fontFamily: 'Fira Sans',
      fontSize: 14,
      flowchart: {
        useMaxWidth: true,
        htmlLabels: true,
        curve: 'basis',
        padding: 15,
        nodeSpacing: 40,
        rankSpacing: 40,
        defaultRenderer: 'dagre-d3',
        diagramPadding: 8, // Increased padding
      },
      themeVariables: {
        primaryColor: '#4f46e5',
        primaryTextColor: '#ffffff',
        primaryBorderColor: '#4338ca',
        lineColor: '#64748b',
        secondaryColor: '#60a5fa',
        tertiaryColor: '#34d399',

        // Node styling
        nodeBorder: '1px',
        mainBkg: '#ffffff',
        nodeBkg: '#ffffff',
        clusterBkg: '#f3f4f6',

        // Text styling
        fontSize: '14px',
        fontFamily: 'Fira Sans',

        darkMode: false,
      },
    })

    // Force re-render all diagrams
    mermaid.run()

    // Add resize handler for responsive diagrams
    const resizeObserver = new ResizeObserver((entries) => {
      for (const entry of entries) {
        const svg = entry.target.querySelector('svg')
        if (svg) {
          svg.style.maxWidth = '80%'
          svg.style.height = 'auto'
        }
      }
    })

    // Observe all mermaid containers
    document.querySelectorAll('.mermaid').forEach((container) => {
      resizeObserver.observe(container)
    })
  }

  // Initialize on first page load
  initializeMermaid()

  // Re-initialize on client-side navigation
  document.addEventListener('astro:page-load', initializeMermaid)
  document.addEventListener('astro:after-swap', initializeMermaid)
</script>

<figure class="mx-auto my-12 w-4/5 overflow-x-auto overflow-y-hidden">
  {
    title && (
      <figcaption class="mb-4 text-center text-lg font-medium text-gray-900 dark:text-gray-100">
        {title}
      </figcaption>
    )
  }
  <div class="mermaid-container relative mx-auto w-full" style={`max-width: ${maxWidth};`}>
    <pre class="mermaid not-prose">
      <slot />
    </pre>
  </div>
</figure>

<style>
  /* Container styles */
  .mermaid-container {
    padding: 1rem 0;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }

  /* Base mermaid styles */
  :global(.mermaid) {
    display: flex !important;
    justify-content: center !important;
    width: 100% !important;
    min-width: 100% !important;
    overflow: visible !important;
  }

  /* SVG specific styles */
  :global(.mermaid svg) {
    max-width: 100% !important;
    height: auto !important;
    width: 100% !important;
  }

  /* Mobile-specific adjustments */
  @media (max-width: 768px) {
    :global(.mermaid svg) {
      transform: scale(0.9);
      transform-origin: center center;
    }

    :global(.mermaid .node rect),
    :global(.mermaid .node circle) {
      transform: scale(0.9);
    }
  }

  /* Node styling */
  :global(.mermaid .node rect),
  :global(.mermaid .node circle),
  :global(.mermaid .node polygon),
  :global(.mermaid .node path) {
    stroke: #333333 !important;
    stroke-width: 2px !important;
    rx: 6px !important;
    ry: 6px !important;
  }

  :global(.mermaid .node .label) {
    font-weight: 500 !important;
  }

  :global(.mermaid .label) {
    background-color: #f8fafc !important;
    padding: 6px 10px !important;
    border-radius: 6px !important;
    font-size: 12px !important;
    font-weight: 500 !important;
    color: #374151 !important;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05) !important;
    border: 1px solid #e2e8f0 !important;
    margin: 0 4px !important;
    white-space: normal !important;
    word-break: break-word !important;
  }

  :global(.mermaid .edgeLabel foreignObject) {
    text-align: center;
    overflow: visible;
  }

  /* Edge styling */
  :global(.mermaid .edge-pattern-solid),
  :global(.mermaid .flowchart-link) {
    stroke-width: 2px !important;
    stroke: #64748b !important;
  }

  /* Transitions */
  :global(.mermaid .node),
  :global(.mermaid .cluster) {
    transition: transform 0.2s ease-in-out;
  }

  /* Cluster styling */
  :global(.mermaid .cluster rect) {
    rx: 8px !important;
    ry: 8px !important;
    fill: #f3f4f6 !important;
    stroke: #e5e7eb !important;
    stroke-width: 2px !important;
  }

  :global(.mermaid .cluster .label) {
    font-size: 14px !important;
    font-weight: 600 !important;
    color: #374151 !important;
  }

  /* Hide empty labels */
  :global(.mermaid .edgeLabel:empty),
  :global(.mermaid .edgeLabel foreignObject:empty) {
    visibility: hidden;
    display: none;
  }

  :global(.mermaid .edgeLabel foreignObject:has(div:empty)),
  :global(.mermaid .edgeLabel:has(div:empty)) {
    visibility: hidden;
    display: none;
  }

  /* Subgraph styling */
  :global(.mermaid .subgraph) {
    stroke: #e5e7eb !important;
    stroke-width: 2px !important;
  }
</style>
